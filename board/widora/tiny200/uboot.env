bootargs_common=console=ttyS0,115200 earlyprintk rootwait consoleblank=0 net.ifnames=0 biosdevname=0

mmc_kernel=zImage
mmc_fdt=devicetree.dtb
mmc_bootpart=2
mmc_rootpart=3

nand_fdt_offset=0x80000
nand_fdt_length=0x4000
nand_kernel_offset=0x100000
nand_kernel_length=0x700000
nand_rootpart=3
nand_overlaypart=4

sf_fdt_offset=0x70000
sf_fdt_length=0x10000
sf_kernel_offset=0x80000
sf_kernel_length=0x580000
sf_rootpart=3
sf_overlaypart=4

stderr=serial,vga
stdin=serial
stdout=serial,vga
kernel_addr_r=0x80000000
fdt_addr_r=0x80700000
ramdisk_addr_r=0x80708000
bootm_size=0x1700000

flasher_ptr_counter=0x80000000
flasher_ptr_buffer=0x80000004
flasher_size_buffer=0x800000
flasher_nandimage=sysimage-nand.img
flasher_norimage=sysimage-nor.img
flash_nand=size mmc 0:${mmc_bootpart} ${flasher_nandimage}; setexpr size_image ${filesize}; mw ${flasher_ptr_counter} ${size_image}; mtd erase spi-nand0; flasher_offset=0; while itest *${flasher_ptr_counter} > 0; do if itest ${size_image} > ${flasher_size_buffer}; then blocksize=${flasher_size_buffer}; else blocksize=0x${size_image}; fi; setexpr size_image ${size_image} - ${blocksize}; mw ${flasher_ptr_counter} ${size_image}; load mmc 0:${mmc_bootpart} ${flasher_ptr_buffer} ${flasher_nandimage} ${flasher_size_buffer} ${flasher_offset}; mtd write spi-nand0 ${flasher_ptr_buffer} ${flasher_offset} ${flasher_size_buffer}; setexpr flasher_offset ${flasher_offset} + ${blocksize}; done;
flash_nor=size mmc 0:${mmc_bootpart} ${flasher_norimage}; setexpr size_image ${filesize}; mw ${flasher_ptr_counter} ${size_image}; flasher_offset=0; while itest *${flasher_ptr_counter} > 0; do if itest ${size_image} > ${flasher_size_buffer}; then blocksize=${flasher_size_buffer}; else blocksize=0x${size_image}; fi; setexpr size_image ${size_image} - ${blocksize}; mw ${flasher_ptr_counter} ${size_image}; load mmc 0:${mmc_bootpart} ${flasher_ptr_buffer} ${flasher_norimage} ${flasher_size_buffer} ${flasher_offset}; sf update ${flasher_ptr_buffer} ${flasher_offset} ${flasher_size_buffer}; setexpr flasher_offset ${flasher_offset} + ${blocksize}; done;

genbootargs=setenv bootargs ${bootargs_common} root=${rootdev} ${overlayfs_config}

fel_boot=echo "Booting from FEL..."; rootdev=/dev/ram0; run genbootargs; bootz ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr_r};
mmc_boot=if mmc dev ${devnum}; then if test -e mmc ${devnum}:${mmc_bootpart} ${mmc_kernel}; then echo "Booting from MMC${devnum}..."; rootdev=/dev/mmcblk${devnum}p${mmc_rootpart}; run genbootargs; load mmc ${devnum}:${mmc_bootpart} $kernel_addr_r ${mmc_kernel}; load mmc ${devnum}:${mmc_bootpart} ${fdt_addr_r} ${mmc_fdt}; bootz ${kernel_addr_r} - ${fdt_addr_r}; fi; fi;
nand_boot=echo "Booting from SPI-NAND..."; mtd read spi-nand0 ${fdt_addr_r} ${nand_fdt_offset} ${nand_fdt_length}; mtd read spi-nand0 ${kernel_addr_r} ${nand_kernel_offset} ${nand_kernel_length}; rootdev=/dev/mtdblock${nand_rootpart}; overlayfs_config="overlayfsdev=/dev/mtdblock${nand_overlaypart}"; run genbootargs; bootz ${kernel_addr_r} - ${fdt_addr_r};
nor_boot=echo "Booting from SPI-NOR..."; sf read ${fdt_addr_r} ${sf_fdt_offset} ${sf_fdt_length}; sf read ${kernel_addr_r} ${sf_kernel_offset} ${sf_kernel_length}; rootdev=/dev/mtdblock${sf_rootpart}; overlayfs_config="overlayfsdev=/dev/mtdblock${sf_overlaypart}"; run genbootargs; bootz ${kernel_addr_r} - ${fdt_addr_r};

bootcmd_fel=if test -n ${fel_booted}; then run fel_boot; fi;
bootcmd_flasher=if mmc dev 0; then if test -e mmc ${devnum}:${mmc_bootpart} ${flasher_nandimage}; then if mtd list; then echo "Flashing SPI-NAND from MMC0..."; run flash_nand; fi; fi; if test -e mmc ${devnum}:${mmc_bootpart} ${flasher_norimage}; then if sf probe; then echo "Flashing SPI-NOR from MMC0..."; run flash_nor; fi; fi; fi;
bootcmd_mmc0=devnum=0; run mmc_boot
bootcmd_mmc1=devnum=1; run mmc_boot
bootcmd_spi_nand=if mtd list; then run nand_boot; fi;
bootcmd_spi_nor=if sf probe; then run nor_boot; fi;
bootcmd_ums=mw 0x01c20848 0x7333; mw 0x01c2085c 0x6a; mw 0x01c20864 0x15; mmc rescan; ums 0 mmc 0:0; ums 0 mmc 1:0;
boot_targets=fel flasher mmc0 mmc1 spi_nand spi_nor ums
bootcmd=for target in ${boot_targets}; do run bootcmd_${target}; done
